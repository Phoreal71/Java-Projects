Programming Project 1
Due Friday, February 23 at 11:59pm
IMPORTANT: Read the Do's and Dont's in the Course Honor Policy found on the Canvas Pages.

I. Overview
The theme of this assignment is to write code for a business entity to create, award, and pay contracts. The purpose is to give you practice writing classes, fields, methods, conditional statements, and constructors. You will also be introduced to polymorphism.

II. Code Readability (20% of your project grade)
Once upon a time, getting a program to work was the only goal of programming. That was before computers took over the world. Now, with highly complex software running much of our lives, the industry has learned that computer code is a written document that must be able to communicate to other humans what the code is doing. If the program is too hard for a human to quickly understand, the company does not want it.

Most companies enforce readable code by having very strict rules about how the program should look. This class will do the same, but will not be quite as strict so you can have some freedom for developing your own style.

To receive the full readability marks, your code must follow the following guideline:

All variables (fields, parameters, local variables) must be given appropriate and descriptive names.
All variable and method names must start with a lowercase letter. All class names must start with an uppercase letter.
The class body should be organized so that all the fields are at the top of the file, the constructors are next, and then the rest of the methods.
Every statement of the program should be on it's own line and not sharing a line with another statement.
All code must be properly indented (see Appendix F of the Lewis book for an example of good style). The amount of indentation is up to you, but it should be at least 2 spaces, and it must be used consistently throughout the code.
You must be consistent in your use of {, }. The closing } must be on its own line and indented the same amount as the line containing the opening {.
There must be an empty line between each method.
There must be a space separating each operator from its operands as well as a space after each comma.
There must be a comment at the top of the file that includes both your name and a description of what the class represents.
There must be a comment directly above each method that, in one or two lines, states what task the method is doing, not how it is doing it. Do not directly copy the homework instructions.
There must be a comment directly above each field that, in one line, states what the field is storing.
There must be a comment either above or to the right of each non-field variable indicating what the variable is storing. Any comments placed to the right should be aligned so they start on the same column.
III. Program Testing Document (20% of your project grade)
Once upon a time, companies thought errors in code were only a minor inconvenience. That was before software glitches started killing people and destroying companies. Now, standard practice is that all code must be thoroughly verified before a company is willing to release it. At a large number of firms, programmers are required to first design the test cases the program must pass and then start writing the code. We will not be that strict in this class, but you will need to test your code.

To receive full testing marks, you must write a testing report that shows that you thoroughly tested every method of the program. The report should be a short English description for each test (what you are testing and what the expected result of the test is) followd by the actual result of the test. If you are using DrJava, you can enter the test into the interactions pane and then copy and paste the test code plus the result to your report. If you fail to complete the program, your report should indicate how you would go about testing the incomplete methods.

Your grade on the testing report is how thoroughly you test your code, not how correctly your code runs. If your code is not 100% correct then your report should show an incorrect result to some test. Testing methods that do not have conditional statements should be pretty straightforward, but you need to put thought into testing methods with conditional statements so that each branch of the if-statement is tested.

Hint 1: You can test multiple methods with one test. For example, you can test each setter/getter method pair together or you can test constructors and getter methods together.

Hint 2: Do not put off testing to the end! Test each method after you complete it. Many methods depend on other methods. Delaying testing could mean cascading errors that cause your whole project to collapse. Since you need to test anyway, copy the tests you do into a document, and you are most of the way to completing your report.

If you are not using DrJava, you are allowed (but not required) create a separate class that tests your program. You must still write a testing report that documents the tests you do in this class. Do not place testing code into a main method of the classes below. That is not the purpose of a main method.

IV. Java Programming (60% of your grade)
Guidelines for the program:

Unless specifically indicated, the listed methods must be public instance methods.
You will need to create several instance fields to store data, and every field must be private.
All fields must be initialized to an appropriate value. They can be initialized either as part if the field declaration or in the constructor. Even if you feel that the default value provided by Java is appropriate, you still must give an explicit initialization.
Any method whose name begins with set should only assign a value to an appropriately named field. The method should do no other processing. Any processing described in a set method description below is for information only. That actual processing will be done by other methods.
Any method whose name begins with get should only return the appropriate value. No other processing should occur in these methods.
Your class must include only the methods listed. You may not write any other methods.
The behavior of your methods must match the descriptions below.
You should not write any loops in your program (though loops are allowed in the testing code).
The program: Create the following classes:

The Contractor class.
The Contractor class represents a contractor. The contractor will have a name, an address, a contact person, and a balance. The Contractor class will have the following methods:

getName
Takes no input and returns a String. Returns the name of the contractor.
setName
Takes a String as input and returns nothing. Sets the name of the contractor.
getAddress
Takes no input and returns a String. Returns the address of the contractor.
setAddress
Takes a String as input and returns nothing. Sets the address of the contractor.
getContact
Takes no input and returns a String. Returns the name of the contact person at the contractor.
setContact
Takes a String as input and returns nothing. Sets the name of the contact person at the contractor.
getAmountPaid
Takes no input and returns a double. Returns the total amount that has been paid to the contractor.
pay
Takes a double and returns nothing. Pays the contractor the specified amount. This amount should be added to the amount already paid to the contractor.
toString:
you are to override the toString method inherited from Object so that the value returned is of the form "name: address"
The Contractor class should have the following constructor:

takes a name, address and contact as input and sets the fields of the class appropriately.
The GovernmentContractor class.
The GovernmentContractor is-a Contractor that is allowed to bid on government contracts as well as normal contracts. The GovernmentContractor class will have the same methods and behaviors as the Contractor class except the toString method should append ": approved government contractor" to the end of the string returned.

The Date class.
The Date class will represent a date. (Java has both Date and Calendar in the API, but both are more complex than needed for this homework.) Our Date class will consist of three int values that represent the day, month, and year. The values for a Date instance will not change once they are set by the constructor. The Date class should have the following methods:

getDay
Takes no input and returns an int. Returns the day of the date. The day should be a value between 1 and 31.
getMonth
Takes no input and returns an int. Returns the month of the date. The month should be between 1 and 12.
getYear
Takes no input and returns an int. Returns the year of the date.
toString
you are to override the toString method inherited from Object so that the value returned is in the form "month/day/year".
equals
you are to override the equals method inherited from Object so that this date is equal to the input object if that object is a Date with the same day, month and year as this date.
daysFromJan1
Takes no input and returns an int. Returns the number of days between this Date and January 1 of the same year. Do not write a loop to compute this. Instead use a large if statement based on the month of the Date. You may assume there are no leap years.
difference
A class method that takes two Dates as input and returns a int. The value returned is the difference in days between them. If the first Date input comes after the second Date, the difference should be positive. If the first Date input comes before the second Date, the difference should be negative. You may ignore leap years in computing the difference. Do not use a loop to do this. Instead figure out a formula that you can use to calculate the difference.
The Date class should have one constructor:

Takes a three int values that represent the month, day and year, and initializes the Date instance with the given inputs. You may assume that the inputs are all valid values.
The Bid class.
The Bid class will represent a bid that a contractor makes for a contract. The bid will have the contract, the contractor, and a value. These values will not change once set by the constructor for the class. The Bid class will have the following methods:

getContract
Takes no input and returns a Contract. Returns the contract for the bid.
getContractor
Takes no input and returns a Contractor. Returns the contractor for the bid.
getValue
Takes no input and returns a double. Returns the value of the bid.
The Bid class will have the following constructor:

Takes a Contract, a Contractor and a double that represents the value and initializes the Bid object appropriately.
The Contract class.
The Contract class represents a contract. The contract will have an identifying number, a minimum and a maximum value (sets the range of what the contractor gets paid upon completion), a deadline (when the contract needs to be completed), a possible bonus and penalty paid if the contractor completes early or late, an indicator for whether the contract is accepting bids, what the best bid is so far, and an indicator of whether the contract has been completed. The Contract class should have the following methods:

getID
Takes no input and returns a String. Gets the ID of the contract.
getMinValue
Takes no input and returns a double. Gets the minimum value of the contract.
setMinValue
Takes a double as input and returns nothing. Sets the minimum value for the contract.
getMaxValue
Takes no input and returns a double. Gets the maximum value of the contract.
setMaxValue
Takes a double as input and returns nothing. Sets the maximum value for the contract.
getBonus
Takes no input and returns a double. Gets the per-day bonus associated with the contract.
setBonus
Takes a double as input and returns nothing. Sets the per-day bonus associated with the contract.
getPenalty
Takes no input and returns a double. Gets the per-day penalty associated with the contract.
setPenalty
Takes a double as input and returns nothing. Sets the per-day penalty associated with the contract.
getDeadline
Takes no input and returns a Date. Gets the deadline for the contract.
setDeadline
Takes a Date as input and returns nothing. Sets the deadline for the contract.
equals
you are to override the equals method inherited from Object so that this Contract is equal to the input object if that object is a Contract with the same ID as this contract.
isAcceptingBids
Takes no input and returns a boolean. Returns true if a contractor may submit a bid for the contract.
getBestBid
Takes no input and returns a Bid. Returns the best bid so far for the contract. May return null if there have been no acceptable bids.
makeBid
Takes a Bid as input and returns a boolean. Processes a bid. The method returns true if this bid is accepted and becomes the current best bid. The method returns false if the bid is not accepted. For a bid to be accepted, the contract must be accepting bids and the bid's contract must equal this contract. Also, the value of the bid must be between (or equal to) the minimum and maximum value for the contract, and the value must be smaller than the current best bid (if there exists a current best bid).
awardContract
Takes no input and returns nothing The contract is no longer accepting bids.
isComplete
Takes no input and returns a boolean. Returns true or false depending on whether the contract has been completed.
completeDate
Takes no input and returns a Date. Returns the date that the contract was completed. Will return null if the contract was not completed.
setComplete Takes a Date as input and returns nothing. Sets the contract to completed, sets the completed date for the contract to the input value, and pays the contractor of the best bid the required amount by calling the pay method of the appropriate Contractor instance. The amount paid should be equal to the value of the best bid plus or minus any bonus or penalty. The bonus and penalty is computed by multiplying the contract bonus or penalty amount by the number of days the contract is completed before or after the deadline. However, the amount paid should not exceed the maximum value of the contract nor should the amount paid be negative (though it can otherwise be smaller than the minimum value of the contract).
The Contract class should have the following constructor:
The constructor takes a contract id, a minimum value, a maximim value, a bonus amount, a penalty amount, and a deadline and initializes the Contract instances appropriately.
The GovernmentContract class.
The GovernmentContract class is a contract by a government entity. The government contract has the same behavior as a Contract except that the makeBid method should return true and accept the bid if all the conditions listed above in Contract's makeBid method hold and if the Contractor on the bid is a GovernmentContractor. If the Contractor is not a GovernmentContractor, or if the conditions listed above in Contract's makeBid method do not hold, then the method should return false and the bid is not accepted.

V. Submitting Your Project
Submit the .java files (not the .class files or the .java~ files) for each of your seven classes plus the testing report on Canvas.
